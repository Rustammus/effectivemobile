basePath: /api/v1
definitions:
  crud.Pagination:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  dto.ReadPeople:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      createdAt:
        example: "2020-01-01T00:00:00Z"
        type: string
      name:
        example: Иван
        type: string
      passportNumber:
        example: 567890
        type: integer
      passportSerie:
        example: 1234
        type: integer
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
      updatedAt:
        description: IsDeleted      bool               `json:"is_deleted" example:"false"`
        example: "2020-01-01T00:00:00Z"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  dto.ReadTask:
    properties:
      end_time:
        example: "2020-01-01T00:00:00Z"
        format: timestamp
        type: string
      name:
        example: do nothing
        type: string
      people_uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      start_time:
        example: "2020-01-01T00:00:00Z"
        format: timestamp
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  schemas.RequestCreatePeople:
    properties:
      passportNumber:
        type: string
    type: object
  schemas.RequestUpdatePeople:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      name:
        example: Иван
        type: string
      passportNumber:
        example: 567890
        type: integer
      passportSerie:
        example: 1234
        type: integer
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
    type: object
  schemas.ResponsePeople:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      created_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      name:
        example: Иван
        type: string
      passportNumber:
        example: 567890
        type: integer
      passportSerie:
        example: 1234
        type: integer
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
      updated_at:
        example: "2020-01-01T00:00:00Z"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  schemas.ResponseUUID:
    properties:
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  v1.IResponseBase-dto_ReadTask:
    properties:
      data:
        $ref: '#/definitions/dto.ReadTask'
      message:
        type: string
    type: object
  v1.IResponseBase-schemas_ResponsePeople:
    properties:
      data:
        $ref: '#/definitions/schemas.ResponsePeople'
      message:
        type: string
    type: object
  v1.IResponseBase-schemas_ResponseUUID:
    properties:
      data:
        $ref: '#/definitions/schemas.ResponseUUID'
      message:
        type: string
    type: object
  v1.IResponseBaseErr:
    properties:
      error: {}
      message:
        type: string
    type: object
  v1.IResponseBaseMulti-dto_ReadTask:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ReadTask'
        type: array
      message:
        type: string
    type: object
  v1.IResponseBasePaginated-dto_ReadPeople:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ReadPeople'
        type: array
      message:
        type: string
      next_pagination:
        $ref: '#/definitions/crud.Pagination'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8082
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is my server.
  license:
    name: Apache helicopter
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: UwU
  version: "1.0"
paths:
  /people:
    get:
      consumes:
      - application/json
      description: List Peoples by filter
      parameters:
      - example: г. Москва, ул. Ленина, д. 5, кв. 1
        in: query
        name: address
        type: string
      - example: Иван
        in: query
        name: name
        type: string
      - example: 567890
        in: query
        name: passportNumber
        type: integer
      - example: 1234
        in: query
        name: passportSerie
        type: integer
      - example: Иванович
        in: query
        name: patronymic
        type: string
      - example: Иванов
        in: query
        name: surname
        type: string
      - example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        in: query
        name: uuid
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBasePaginated-dto_ReadPeople'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: List Peoples by filter
      tags:
      - People API
    post:
      consumes:
      - application/json
      description: Create people
      parameters:
      - description: People base
        in: body
        name: People
        required: true
        schema:
          $ref: '#/definitions/schemas.RequestCreatePeople'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponseUUID'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Create people
      tags:
      - People API
  /people/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete people
      parameters:
      - description: People UUID
        format: uuid
        in: path
        name: uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponseUUID'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Delete people
      tags:
      - People API
    get:
      consumes:
      - application/json
      description: Find People by uuid
      parameters:
      - description: People UUID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponsePeople'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Find People by uuid
      tags:
      - People API
    put:
      consumes:
      - application/json
      description: Update people
      parameters:
      - description: People base
        in: body
        name: UpdatePeople
        required: true
        schema:
          $ref: '#/definitions/schemas.RequestUpdatePeople'
      - description: People UUID
        format: uuid
        in: path
        name: uuid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponsePeople'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Update people
      tags:
      - People API
  /people/{uuid}/start-task:
    post:
      consumes:
      - application/json
      description: Create and start task by People uuid
      parameters:
      - description: People UUID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Task name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponseUUID'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Create and start task by People uuid
      tags:
      - People API
  /people/{uuid}/tasks:
    get:
      consumes:
      - application/json
      description: List all tasks by People uuid
      parameters:
      - description: People UUID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBaseMulti-dto_ReadTask'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: List all tasks by People uuid
      tags:
      - People API
  /task:
    get:
      consumes:
      - application/json
      description: List tasks by people
      parameters:
      - description: People UUID
        format: uuid
        in: query
        name: people
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBaseMulti-dto_ReadTask'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: List tasks by people
      tags:
      - Task API
    post:
      consumes:
      - application/json
      description: Create and start task by People uuid
      parameters:
      - description: Task name
        in: query
        name: name
        type: string
      - description: People
        format: uuid
        in: query
        name: people
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-schemas_ResponseUUID'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Create and start task by People uuid
      tags:
      - Task API
  /task/{uuid}:
    put:
      consumes:
      - application/json
      description: Stop task by uuid
      parameters:
      - description: Task UUID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IResponseBase-dto_ReadTask'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.IResponseBaseErr'
      summary: Stop task by uuid
      tags:
      - Task API
swagger: "2.0"
